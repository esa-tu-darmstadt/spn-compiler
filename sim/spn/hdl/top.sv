// Generated by CIRCT unknown git version

timeunit 1ns;
timeprecision 1ns;

`include "FPAdd.v"
`include "FPMult.v"
    
// external module FPAdd

// external module FPMult

// external module FPLog

// external module sv_constant

module spn_categorical_9(
  input         clk,
                rst,
  input  [7:0]  in_index,
  output [30:0] out_prob);

  wire [2:0][30:0] _GEN = {{31'h3F4CCCCD}, {31'h3E0F5C29}, {31'h3D75C28F}};
  assign out_prob = _GEN[in_index[1:0]];
endmodule

module spn_categorical_8(
  input         clk,
                rst,
  input  [7:0]  in_index,
  output [30:0] out_prob);

  wire [2:0][30:0] _GEN = {{31'h3F19999A}, {31'h3E19999A}, {31'h3E800000}};
  assign out_prob = _GEN[in_index[1:0]];
endmodule

module spn_categorical_7(
  input         clk,
                rst,
  input  [7:0]  in_index,
  output [30:0] out_prob);

  wire [2:0][30:0] _GEN = {{31'h3F000000}, {31'h3E4CCCCD}, {31'h3E99999A}};
  assign out_prob = _GEN[in_index[1:0]];
endmodule

module spn_categorical_6(
  input         clk,
                rst,
  input  [7:0]  in_index,
  output [30:0] out_prob);

  wire [2:0][30:0] _GEN = {{31'h3E800000}, {31'h3F200000}, {31'h3E000000}};
  assign out_prob = _GEN[in_index[1:0]];
endmodule

module spn_categorical_5(
  input         clk,
                rst,
  input  [7:0]  in_index,
  output [30:0] out_prob);

  wire [2:0][30:0] _GEN = {{31'h3EB33333}, {31'h3F0CCCCD}, {31'h3DCCCCCD}};
  assign out_prob = _GEN[in_index[1:0]];
endmodule

module spn_body(
  input         clk,
                rst,
  input  [7:0]  in_0,
                in_1,
                in_2,
                in_3,
                in_4,
  output [30:0] out_prob);

  wire [30:0] _instance_23_io_r;	// mlir/test/lo2hw/test.mlir:31:15
  wire [30:0] _instance_22_io_r;	// mlir/test/lo2hw/test.mlir:30:15
  wire [30:0] _instance_21_io_r;	// mlir/test/lo2hw/test.mlir:29:15
  wire [30:0] _instance_19_io_r;	// mlir/test/lo2hw/test.mlir:27:15
  wire [30:0] _instance_17_io_r;	// mlir/test/lo2hw/test.mlir:25:15
  wire [30:0] _instance_16_io_r;	// mlir/test/lo2hw/test.mlir:24:15
  wire [30:0] _instance_14_io_r;	// mlir/test/lo2hw/test.mlir:22:15
  wire [30:0] _instance_13_io_r;	// mlir/test/lo2hw/test.mlir:21:15
  wire [30:0] _instance_11_io_r;	// mlir/test/lo2hw/test.mlir:19:15
  wire [30:0] _instance_9_out_prob;	// mlir/test/lo2hw/test.mlir:17:15
  wire [30:0] _instance_8_out_prob;	// mlir/test/lo2hw/test.mlir:16:15
  wire [30:0] _instance_7_out_prob;	// mlir/test/lo2hw/test.mlir:15:15
  wire [30:0] _instance_6_out_prob;	// mlir/test/lo2hw/test.mlir:14:14
  wire [30:0] _instance_5_out_prob;	// mlir/test/lo2hw/test.mlir:13:14
  spn_categorical_5 instance_5 (	// mlir/test/lo2hw/test.mlir:13:14
    .clk      (clk),
    .rst      (rst),
    .in_index (in_0),
    .out_prob (_instance_5_out_prob)
  );
  spn_categorical_6 instance_6 (	// mlir/test/lo2hw/test.mlir:14:14
    .clk      (clk),
    .rst      (rst),
    .in_index (in_1),
    .out_prob (_instance_6_out_prob)
  );
  spn_categorical_7 instance_7 (	// mlir/test/lo2hw/test.mlir:15:15
    .clk      (clk),
    .rst      (rst),
    .in_index (in_2),
    .out_prob (_instance_7_out_prob)
  );
  spn_categorical_8 instance_8 (	// mlir/test/lo2hw/test.mlir:16:15
    .clk      (clk),
    .rst      (rst),
    .in_index (in_3),
    .out_prob (_instance_8_out_prob)
  );
  spn_categorical_9 instance_9 (	// mlir/test/lo2hw/test.mlir:17:15
    .clk      (clk),
    .rst      (rst),
    .in_index (in_4),
    .out_prob (_instance_9_out_prob)
  );
  reg  [30:0] shiftReg;
  FPMult instance_11 (	// mlir/test/lo2hw/test.mlir:19:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_5_out_prob),	// mlir/test/lo2hw/test.mlir:13:14
    .io_b  (shiftReg),
    .io_r  (_instance_11_io_r)
  );
  reg  [30:0] shiftReg_0;
  FPMult instance_13 (	// mlir/test/lo2hw/test.mlir:21:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_6_out_prob),	// mlir/test/lo2hw/test.mlir:14:14
    .io_b  (shiftReg_0),
    .io_r  (_instance_13_io_r)
  );
  FPAdd instance_14 (	// mlir/test/lo2hw/test.mlir:22:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_11_io_r),	// mlir/test/lo2hw/test.mlir:19:15
    .io_b  (_instance_13_io_r),	// mlir/test/lo2hw/test.mlir:21:15
    .io_r  (_instance_14_io_r)
  );
  reg  [30:0] shiftReg_1;
  FPMult instance_16 (	// mlir/test/lo2hw/test.mlir:24:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_7_out_prob),	// mlir/test/lo2hw/test.mlir:15:15
    .io_b  (shiftReg_1),
    .io_r  (_instance_16_io_r)
  );
  reg  [30:0] shiftReg_2;
  reg  [30:0] shiftReg_3;
  reg  [30:0] shiftReg_4;
  reg  [30:0] shiftReg_5;
  reg  [30:0] shiftReg_6;
  FPAdd instance_17 (	// mlir/test/lo2hw/test.mlir:25:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_14_io_r),	// mlir/test/lo2hw/test.mlir:22:15
    .io_b  (shiftReg_6),
    .io_r  (_instance_17_io_r)
  );
  reg  [30:0] shiftReg_7;
  FPMult instance_19 (	// mlir/test/lo2hw/test.mlir:27:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_8_out_prob),	// mlir/test/lo2hw/test.mlir:16:15
    .io_b  (shiftReg_7),
    .io_r  (_instance_19_io_r)
  );
  reg  [30:0] shiftReg_8;
  FPMult instance_21 (	// mlir/test/lo2hw/test.mlir:29:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_9_out_prob),	// mlir/test/lo2hw/test.mlir:17:15
    .io_b  (shiftReg_8),
    .io_r  (_instance_21_io_r)
  );
  FPAdd instance_22 (	// mlir/test/lo2hw/test.mlir:30:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_19_io_r),	// mlir/test/lo2hw/test.mlir:27:15
    .io_b  (_instance_21_io_r),	// mlir/test/lo2hw/test.mlir:29:15
    .io_r  (_instance_22_io_r)
  );
  reg  [30:0] shiftReg_9;
  reg  [30:0] shiftReg_10;
  reg  [30:0] shiftReg_11;
  reg  [30:0] shiftReg_12;
  reg  [30:0] shiftReg_13;
  FPAdd instance_23 (	// mlir/test/lo2hw/test.mlir:31:15
    .clock (clk),
    .reset (rst),
    .io_a  (_instance_17_io_r),	// mlir/test/lo2hw/test.mlir:25:15
    .io_b  (shiftReg_13),
    .io_r  (_instance_23_io_r)
  );
  FPLog instance_24 (	// mlir/test/lo2hw/test.mlir:32:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_23_io_r),	// mlir/test/lo2hw/test.mlir:31:15
    .out_b (out_prob)
  );
  always @(posedge clk) begin
    shiftReg <= 31'h3DCCCCCD;
    shiftReg_0 <= 31'h3DCCCCCD;
    shiftReg_1 <= 31'h3DCCCCCD;
    shiftReg_2 <= _instance_16_io_r;	// mlir/test/lo2hw/test.mlir:24:15
    shiftReg_3 <= shiftReg_2;
    shiftReg_4 <= shiftReg_3;
    shiftReg_5 <= shiftReg_4;
    shiftReg_6 <= shiftReg_5;
    shiftReg_7 <= 31'h3ECCCCCD;
    shiftReg_8 <= 31'h3E99999A;
    shiftReg_9 <= _instance_22_io_r;	// mlir/test/lo2hw/test.mlir:30:15
    shiftReg_10 <= shiftReg_9;
    shiftReg_11 <= shiftReg_10;
    shiftReg_12 <= shiftReg_11;
    shiftReg_13 <= shiftReg_12;
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        shiftReg = _RANDOM_0[30:0];
        shiftReg_0 = {_RANDOM_0[31], _RANDOM_1[29:0]};
        shiftReg_1 = {_RANDOM_1[31:30], _RANDOM_2[28:0]};
        shiftReg_2 = {_RANDOM_2[31:29], _RANDOM_3[27:0]};
        shiftReg_3 = {_RANDOM_3[31:28], _RANDOM_4[26:0]};
        shiftReg_4 = {_RANDOM_4[31:27], _RANDOM_5[25:0]};
        shiftReg_5 = {_RANDOM_5[31:26], _RANDOM_6[24:0]};
        shiftReg_6 = {_RANDOM_6[31:25], _RANDOM_7[23:0]};
        shiftReg_7 = {_RANDOM_7[31:24], _RANDOM_8[22:0]};
        shiftReg_8 = {_RANDOM_8[31:23], _RANDOM_9[21:0]};
        shiftReg_9 = {_RANDOM_9[31:22], _RANDOM_10[20:0]};
        shiftReg_10 = {_RANDOM_10[31:21], _RANDOM_11[19:0]};
        shiftReg_11 = {_RANDOM_11[31:20], _RANDOM_12[18:0]};
        shiftReg_12 = {_RANDOM_12[31:19], _RANDOM_13[17:0]};
        shiftReg_13 = {_RANDOM_13[31:18], _RANDOM_14[16:0]};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
endmodule

