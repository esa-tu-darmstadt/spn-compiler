// Generated by CIRCT unknown git version

`include "FPAdd.sv"
`include "FPMult.sv"
    
// external module sv_add

// external module sv_mul

// external module sv_log

// external module sv_constant

// external module sv_categorical

module spn_body(
  input         clk,
                rst,
  input  [7:0]  in_0,
                in_1,
                in_2,
                in_3,
                in_4,
  output [63:0] out_prob);

  wire [63:0] _instance_23_out_c;	// mlir/test/lo2hw/test.mlir:31:15
  wire [63:0] _instance_22_out_c;	// mlir/test/lo2hw/test.mlir:30:15
  wire [63:0] _instance_21_out_c;	// mlir/test/lo2hw/test.mlir:29:15
  wire [63:0] _instance_20_out_const;	// mlir/test/lo2hw/test.mlir:28:15
  wire [63:0] _instance_19_out_c;	// mlir/test/lo2hw/test.mlir:27:15
  wire [63:0] _instance_18_out_const;	// mlir/test/lo2hw/test.mlir:26:15
  wire [63:0] _instance_17_out_c;	// mlir/test/lo2hw/test.mlir:25:15
  wire [63:0] _instance_16_out_c;	// mlir/test/lo2hw/test.mlir:24:15
  wire [63:0] _instance_15_out_const;	// mlir/test/lo2hw/test.mlir:23:15
  wire [63:0] _instance_14_out_c;	// mlir/test/lo2hw/test.mlir:22:15
  wire [63:0] _instance_13_out_c;	// mlir/test/lo2hw/test.mlir:21:15
  wire [63:0] _instance_12_out_const;	// mlir/test/lo2hw/test.mlir:20:15
  wire [63:0] _instance_11_out_c;	// mlir/test/lo2hw/test.mlir:19:15
  wire [63:0] _instance_10_out_const;	// mlir/test/lo2hw/test.mlir:18:15
  wire [63:0] _instance_9_out_prob;	// mlir/test/lo2hw/test.mlir:17:15
  wire [63:0] _instance_8_out_prob;	// mlir/test/lo2hw/test.mlir:16:15
  wire [63:0] _instance_7_out_prob;	// mlir/test/lo2hw/test.mlir:15:15
  wire [63:0] _instance_6_out_prob;	// mlir/test/lo2hw/test.mlir:14:14
  wire [63:0] _instance_5_out_prob;	// mlir/test/lo2hw/test.mlir:13:14
  sv_categorical instance_5 (	// mlir/test/lo2hw/test.mlir:13:14
    .clk      (clk),
    .rst      (rst),
    .in_index (in_0),
    .out_prob (_instance_5_out_prob)
  );
  sv_categorical instance_6 (	// mlir/test/lo2hw/test.mlir:14:14
    .clk      (clk),
    .rst      (rst),
    .in_index (in_1),
    .out_prob (_instance_6_out_prob)
  );
  sv_categorical instance_7 (	// mlir/test/lo2hw/test.mlir:15:15
    .clk      (clk),
    .rst      (rst),
    .in_index (in_2),
    .out_prob (_instance_7_out_prob)
  );
  sv_categorical instance_8 (	// mlir/test/lo2hw/test.mlir:16:15
    .clk      (clk),
    .rst      (rst),
    .in_index (in_3),
    .out_prob (_instance_8_out_prob)
  );
  sv_categorical instance_9 (	// mlir/test/lo2hw/test.mlir:17:15
    .clk      (clk),
    .rst      (rst),
    .in_index (in_4),
    .out_prob (_instance_9_out_prob)
  );
  sv_constant instance_10 (	// mlir/test/lo2hw/test.mlir:18:15
    .clk       (clk),
    .rst       (rst),
    .out_const (_instance_10_out_const)
  );
  reg  [63:0] shiftReg;
  sv_mul instance_11 (	// mlir/test/lo2hw/test.mlir:19:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_5_out_prob),	// mlir/test/lo2hw/test.mlir:13:14
    .in_b  (shiftReg),
    .out_c (_instance_11_out_c)
  );
  sv_constant instance_12 (	// mlir/test/lo2hw/test.mlir:20:15
    .clk       (clk),
    .rst       (rst),
    .out_const (_instance_12_out_const)
  );
  reg  [63:0] shiftReg_0;
  sv_mul instance_13 (	// mlir/test/lo2hw/test.mlir:21:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_6_out_prob),	// mlir/test/lo2hw/test.mlir:14:14
    .in_b  (shiftReg_0),
    .out_c (_instance_13_out_c)
  );
  sv_add instance_14 (	// mlir/test/lo2hw/test.mlir:22:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_11_out_c),	// mlir/test/lo2hw/test.mlir:19:15
    .in_b  (_instance_13_out_c),	// mlir/test/lo2hw/test.mlir:21:15
    .out_c (_instance_14_out_c)
  );
  sv_constant instance_15 (	// mlir/test/lo2hw/test.mlir:23:15
    .clk       (clk),
    .rst       (rst),
    .out_const (_instance_15_out_const)
  );
  reg  [63:0] shiftReg_1;
  sv_mul instance_16 (	// mlir/test/lo2hw/test.mlir:24:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_7_out_prob),	// mlir/test/lo2hw/test.mlir:15:15
    .in_b  (shiftReg_1),
    .out_c (_instance_16_out_c)
  );
  reg  [63:0] shiftReg_2;
  reg  [63:0] shiftReg_3;
  reg  [63:0] shiftReg_4;
  reg  [63:0] shiftReg_5;
  reg  [63:0] shiftReg_6;
  sv_add instance_17 (	// mlir/test/lo2hw/test.mlir:25:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_14_out_c),	// mlir/test/lo2hw/test.mlir:22:15
    .in_b  (shiftReg_6),
    .out_c (_instance_17_out_c)
  );
  sv_constant instance_18 (	// mlir/test/lo2hw/test.mlir:26:15
    .clk       (clk),
    .rst       (rst),
    .out_const (_instance_18_out_const)
  );
  reg  [63:0] shiftReg_7;
  sv_mul instance_19 (	// mlir/test/lo2hw/test.mlir:27:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_8_out_prob),	// mlir/test/lo2hw/test.mlir:16:15
    .in_b  (shiftReg_7),
    .out_c (_instance_19_out_c)
  );
  sv_constant instance_20 (	// mlir/test/lo2hw/test.mlir:28:15
    .clk       (clk),
    .rst       (rst),
    .out_const (_instance_20_out_const)
  );
  reg  [63:0] shiftReg_8;
  sv_mul instance_21 (	// mlir/test/lo2hw/test.mlir:29:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_9_out_prob),	// mlir/test/lo2hw/test.mlir:17:15
    .in_b  (shiftReg_8),
    .out_c (_instance_21_out_c)
  );
  sv_add instance_22 (	// mlir/test/lo2hw/test.mlir:30:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_19_out_c),	// mlir/test/lo2hw/test.mlir:27:15
    .in_b  (_instance_21_out_c),	// mlir/test/lo2hw/test.mlir:29:15
    .out_c (_instance_22_out_c)
  );
  reg  [63:0] shiftReg_9;
  reg  [63:0] shiftReg_10;
  reg  [63:0] shiftReg_11;
  reg  [63:0] shiftReg_12;
  reg  [63:0] shiftReg_13;
  sv_add instance_23 (	// mlir/test/lo2hw/test.mlir:31:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_17_out_c),	// mlir/test/lo2hw/test.mlir:25:15
    .in_b  (shiftReg_13),
    .out_c (_instance_23_out_c)
  );
  sv_log instance_24 (	// mlir/test/lo2hw/test.mlir:32:15
    .clk   (clk),
    .rst   (rst),
    .in_a  (_instance_23_out_c),	// mlir/test/lo2hw/test.mlir:31:15
    .out_b (out_prob)
  );
  always @(posedge clk) begin
    shiftReg <= _instance_10_out_const;	// mlir/test/lo2hw/test.mlir:18:15
    shiftReg_0 <= _instance_12_out_const;	// mlir/test/lo2hw/test.mlir:20:15
    shiftReg_1 <= _instance_15_out_const;	// mlir/test/lo2hw/test.mlir:23:15
    shiftReg_2 <= _instance_16_out_c;	// mlir/test/lo2hw/test.mlir:24:15
    shiftReg_3 <= shiftReg_2;
    shiftReg_4 <= shiftReg_3;
    shiftReg_5 <= shiftReg_4;
    shiftReg_6 <= shiftReg_5;
    shiftReg_7 <= _instance_18_out_const;	// mlir/test/lo2hw/test.mlir:26:15
    shiftReg_8 <= _instance_20_out_const;	// mlir/test/lo2hw/test.mlir:28:15
    shiftReg_9 <= _instance_22_out_c;	// mlir/test/lo2hw/test.mlir:30:15
    shiftReg_10 <= shiftReg_9;
    shiftReg_11 <= shiftReg_10;
    shiftReg_12 <= shiftReg_11;
    shiftReg_13 <= shiftReg_12;
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      automatic logic [31:0] _RANDOM_15;
      automatic logic [31:0] _RANDOM_16;
      automatic logic [31:0] _RANDOM_17;
      automatic logic [31:0] _RANDOM_18;
      automatic logic [31:0] _RANDOM_19;
      automatic logic [31:0] _RANDOM_20;
      automatic logic [31:0] _RANDOM_21;
      automatic logic [31:0] _RANDOM_22;
      automatic logic [31:0] _RANDOM_23;
      automatic logic [31:0] _RANDOM_24;
      automatic logic [31:0] _RANDOM_25;
      automatic logic [31:0] _RANDOM_26;
      automatic logic [31:0] _RANDOM_27;
      automatic logic [31:0] _RANDOM_28;
      automatic logic [31:0] _RANDOM_29;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        shiftReg = {_RANDOM_0, _RANDOM_1};
        shiftReg_0 = {_RANDOM_2, _RANDOM_3};
        shiftReg_1 = {_RANDOM_4, _RANDOM_5};
        shiftReg_2 = {_RANDOM_6, _RANDOM_7};
        shiftReg_3 = {_RANDOM_8, _RANDOM_9};
        shiftReg_4 = {_RANDOM_10, _RANDOM_11};
        shiftReg_5 = {_RANDOM_12, _RANDOM_13};
        shiftReg_6 = {_RANDOM_14, _RANDOM_15};
        shiftReg_7 = {_RANDOM_16, _RANDOM_17};
        shiftReg_8 = {_RANDOM_18, _RANDOM_19};
        shiftReg_9 = {_RANDOM_20, _RANDOM_21};
        shiftReg_10 = {_RANDOM_22, _RANDOM_23};
        shiftReg_11 = {_RANDOM_24, _RANDOM_25};
        shiftReg_12 = {_RANDOM_26, _RANDOM_27};
        shiftReg_13 = {_RANDOM_28, _RANDOM_29};
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
endmodule

