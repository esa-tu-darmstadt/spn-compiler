#include "TapascoWrapper.hpp"

#include <fstream>
#include <filesystem>
#include <util/json.hpp>

#define COUNT 100


void printUsage() {
  std::cout
    << "Usage: tapapp <config.json> <input.txt> <output.txt>\n"
    << "  config.json: Path to the config.json file generated by the compiler\n"
    << "  input.txt: Path to the input file\n"
    << "  output.txt: Path to the expected output file\n";
}

int main(int argc, const char **argv) {
  if (argc < 4) {
    printUsage();
    return 1;
  }

  namespace fs = std::filesystem;
  using json = nlohmann::json;

  std::ifstream f(argv[1]);
  json data = json::parse(f);

  spnc::FPGAKernel fpgaKernel{
    .kernelId = data.at("kernelId"),
    .deviceSpeed = data.at("device").at("mhz"),
    .spnVarCount = data.at("varCount"),
    .spnBitsPerVar = data.at("bitsPerVar"),
    .spnResultWidth = data.at("floatType") == "float32" ? 32 : 64,
    .memDataWidth = data.at("axi4").at("dataWidth"),
    .memAddrWidth = data.at("axi4").at("addrWidth"),
    .liteDataWidth = data.at("axi4Lite").at("dataWidth"),
    .liteAddrWidth = data.at("axi4Lite").at("addrWidth")
  };

  assert(fpgaKernel.spnResultWidth == 32);

  spnc::Kernel kernel{fpgaKernel};

  spnc_rt::tapasco_wrapper::TapascoSPNDevice *device =
    spnc_rt::initTapasco(kernel);

  std::vector<uint32_t> inputData;
  std::vector<float> outputData(fpgaKernel.spnVarCount * COUNT);

  for (uint32_t i = 0; i < fpgaKernel.spnVarCount * COUNT; ++i)
    inputData.push_back(0);

  device->executeQuery(COUNT, inputData.data(), outputData.data());

  std::cout << "got:\n";
  for (uint32_t i = 0; i < outputData.size(); ++i)
    std::cout << outputData[i] << "\n";

  return 0;
}