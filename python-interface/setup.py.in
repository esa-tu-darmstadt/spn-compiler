#
# Auto-generated by CMake, do not edit!
#
import setuptools
import shutil
import os

if @INCLUDE_MLIR_CUDA_WRAPPERS@:
    cudaWrappers = os.path.join(os.path.realpath(os.path.dirname(__file__)), "spnc", "@MLIR_CUDA_WRAPPER_NAME@")
    if not os.path.isfile(cudaWrappers):
        raise RuntimeError("MLIR CUDA wrappers not found")
    binaryPackages = ["$<TARGET_FILE_NAME:spncpy>", "@MLIR_CUDA_WRAPPER_NAME@"]
else:
    binaryPackages = ["$<TARGET_FILE_NAME:spncpy>"]

spncpyLib = os.path.join(os.path.realpath(os.path.dirname(__file__)), "spnc", "$<TARGET_FILE_NAME:spncpy>")
if not os.path.isfile(spncpyLib):
    raise RuntimeError("Python interface library not found, run make first")

with open("requirements.txt", "r") as rf:
    requirements = rf.readlines()

setuptools.setup(
    name="spnc",
    version="0.1",
    author="Embedded Systems and Applications Group, TU Darmstadt",
    author_email="sommer@esa.tu-darmstadt.de",
    description="SPNC: A CPU- and GPU compiler for Sum-Product Networks",
    url="https://github.com/esa-tu-darmstadt/spn-compiler",
    classifiers=[
        "Development Status :: 4 - Beta",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: POSIX :: Linux",
        "Programming Language :: C++"
    ],
    packages=setuptools.find_packages(include=["spnc", "spnc.*"]),
    package_data={"spnc" : binaryPackages},
    include_package_data=True,
    install_requires=requirements,
    setup_requires=["pytest-runner"],
    tests_require=["pytest"],
    test_suite="test",
)