// RUN: %optcall --convert-lospn-structure-to-cpu %s | FileCheck %s
// Test (re)generated by regenerate_tests.py.
module {
  "lo_spn.kernel"() <{function_type = (memref<?x2xi32>, memref<1x?xf64>) -> (), sym_name = "spn_cpu"}> ({
  ^bb0(%arg0: memref<?x2xi32>, %arg1: memref<1x?xf64>):
    %c0 = arith.constant 0 : index
    %dim = memref.dim %arg0, %c0 : memref<?x2xi32>
    %alloc = memref.alloc(%dim) : memref<1x?xf64>
    "lo_spn.task"(%arg0, %alloc) <{batchSize = 1 : ui32}> ({
    ^bb0(%arg2: index, %arg3: memref<?x2xi32>, %arg4: memref<1x?xf64>):
      %0 = "lo_spn.batch_read"(%arg3, %arg2) <{staticIndex = 0 : ui32}> : (memref<?x2xi32>, index) -> i32
      %1 = "lo_spn.batch_read"(%arg3, %arg2) <{staticIndex = 1 : ui32}> : (memref<?x2xi32>, index) -> i32
      %2 = "lo_spn.body"(%0, %1) ({
      ^bb0(%arg5: i32, %arg6: i32):
        %3 = "lo_spn.histogram"(%arg5) <{bucketCount = 2 : ui32, buckets = [#hi_spn.bucket<0 to 1 = 2.500000e-01>, #hi_spn.bucket<1 to 2 = 7.500000e-01>], supportMarginal = false}> : (i32) -> f64
        %4 = "lo_spn.histogram"(%arg6) <{bucketCount = 2 : ui32, buckets = [#hi_spn.bucket<0 to 1 = 4.500000e-01>, #hi_spn.bucket<1 to 2 = 5.500000e-01>], supportMarginal = false}> : (i32) -> f64
        %5 = "lo_spn.mul"(%3, %4) : (f64, f64) -> f64
        %6 = "lo_spn.log"(%5) : (f64) -> f64
        "lo_spn.yield"(%6) : (f64) -> ()
      }) : (i32, i32) -> f64
      "lo_spn.batch_write"(%arg4, %arg2, %2) <{transposed = true}> : (memref<1x?xf64>, index, f64) -> ()
      "lo_spn.return"() : () -> ()
    }) : (memref<?x2xi32>, memref<1x?xf64>) -> ()
    "lo_spn.copy"(%alloc, %arg1) : (memref<1x?xf64>, memref<1x?xf64>) -> ()
    "lo_spn.return"() : () -> ()
  }) {type = (memref<?x2xi32>, memref<1x?xf64>) -> ()} : () -> ()
}

// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py

// The script is designed to make adding checks to
// a test case fast, it is *not* designed to be authoritative
// about what constitutes a good test! The CHECK should be
// minimized and named to reflect the test intent.



// CHECK-LABEL:   func.func @task_0(
// CHECK-SAME:                      %[[VAL_0:.*]]: memref<?x2xi32>,
// CHECK-SAME:                      %[[VAL_1:.*]]: memref<1x?xf64>) {
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : index
// CHECK:           %[[VAL_3:.*]] = "lo_spn.batch_read"(%[[VAL_0]], %[[VAL_2]]) <{staticIndex = 0 : ui32}> : (memref<?x2xi32>, index) -> i32
// CHECK:           %[[VAL_4:.*]] = "lo_spn.batch_read"(%[[VAL_0]], %[[VAL_2]]) <{staticIndex = 1 : ui32}> : (memref<?x2xi32>, index) -> i32
// CHECK:           %[[VAL_5:.*]] = "lo_spn.histogram"(%[[VAL_3]]) <{bucketCount = 2 : ui32, buckets = [#hi_spn.bucket<0 to 1 = 2.500000e-01>, #hi_spn.bucket<1 to 2 = 7.500000e-01>], supportMarginal = false}> : (i32) -> f64
// CHECK:           %[[VAL_6:.*]] = "lo_spn.histogram"(%[[VAL_4]]) <{bucketCount = 2 : ui32, buckets = [#hi_spn.bucket<0 to 1 = 4.500000e-01>, #hi_spn.bucket<1 to 2 = 5.500000e-01>], supportMarginal = false}> : (i32) -> f64
// CHECK:           %[[VAL_7:.*]] = "lo_spn.mul"(%[[VAL_5]], %[[VAL_6]]) : (f64, f64) -> f64
// CHECK:           %[[VAL_8:.*]] = "lo_spn.log"(%[[VAL_7]]) : (f64) -> f64
// CHECK:           "lo_spn.batch_write"(%[[VAL_1]], %[[VAL_2]], %[[VAL_8]]) <{transposed = true}> : (memref<1x?xf64>, index, f64) -> ()
// CHECK:           "lo_spn.return"() : () -> ()
// CHECK:         }

// CHECK-LABEL:   func.func @spn_cpu(
// CHECK-SAME:                       %[[VAL_0:.*]]: memref<?x2xi32>,
// CHECK-SAME:                       %[[VAL_1:.*]]: memref<1x?xf64>) {
// CHECK:           %[[VAL_2:.*]] = arith.constant 0 : index
// CHECK:           %[[VAL_3:.*]] = memref.dim %[[VAL_0]], %[[VAL_2]] : memref<?x2xi32>
// CHECK:           %[[VAL_4:.*]] = memref.alloc(%[[VAL_3]]) : memref<1x?xf64>
// CHECK:           call @task_0(%[[VAL_0]], %[[VAL_4]]) : (memref<?x2xi32>, memref<1x?xf64>) -> ()
// CHECK:           "lo_spn.copy"(%[[VAL_4]], %[[VAL_1]]) : (memref<1x?xf64>, memref<1x?xf64>) -> ()
// CHECK:           "lo_spn.return"() : () -> ()
// CHECK:         }

