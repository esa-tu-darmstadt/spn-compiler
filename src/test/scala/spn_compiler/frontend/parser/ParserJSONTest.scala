package spn_compiler.frontend.parser

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{FlatSpec, Matchers}

import scala.io.{BufferedSource, Source}
import spn_compiler.graph_ir.nodes._
import play.api.libs.json._

@RunWith(classOf[JUnitRunner])
class ParserJSONTest extends FlatSpec with Matchers {
  val pathToExampleNips5 : String = ""
  val fileExampleNips5 : BufferedSource = Source.fromURL(getClass.getResource("/NIPS5.json"))
  val jsonStringNips5 : String = fileExampleNips5.getLines.mkString

  val HistogramNode_02 : Histogram = Histogram("HistogramNode_2",InputVar("pca",0),List(HistogramBucket(0,1,0.8927203065), HistogramBucket(1,2,0.0076628352), HistogramBucket(2,3,0.0038314176), HistogramBucket(3,4,0.0038314176), HistogramBucket(4,5,0.0076628352), HistogramBucket(5,6,0.0038314176), HistogramBucket(6,8,0.0038314176), HistogramBucket(8,9,0.0038314176), HistogramBucket(9,10,0.0038314176), HistogramBucket(10,11,0.0038314176), HistogramBucket(11,14,0.0038314176), HistogramBucket(14,15,0.0038314176), HistogramBucket(15,16,0.0076628352), HistogramBucket(16,17,0.0038314176), HistogramBucket(17,18,0.0038314176), HistogramBucket(18,19,0.0038314176), HistogramBucket(19,20,0.0038314176), HistogramBucket(20,24,0.0038314176), HistogramBucket(24,26,0.0038314176), HistogramBucket(26,27,0.0038314176), HistogramBucket(27,31,0.0038314176), HistogramBucket(31,32,0.0038314176), HistogramBucket(32,38,0.0038314176), HistogramBucket(38,48,0.0038314176), HistogramBucket(48,71,0.0038314176), HistogramBucket(71,72,0.0038314176)))
  val HistogramNode_03 : Histogram = Histogram("HistogramNode_3",InputVar("building",1),List(HistogramBucket(0,1,0.8278688525), HistogramBucket(1,2,0.1147540984), HistogramBucket(2,3,0.0245901639), HistogramBucket(3,4,0.0081967213), HistogramBucket(4,5,0.0081967213), HistogramBucket(5,12,0.0040983607), HistogramBucket(12,14,0.0040983607), HistogramBucket(14,71,0.0040983607), HistogramBucket(71,72,0.0040983607)))
  val HistogramNode_04 : Histogram = Histogram("HistogramNode_4",InputVar("training",2),List(HistogramBucket(0,1,0.0035211268), HistogramBucket(1,2,0.0035211268), HistogramBucket(2,3,0.0035211268), HistogramBucket(3,4,0.0035211268), HistogramBucket(4,5,0.0035211268), HistogramBucket(5,6,0.0035211268), HistogramBucket(6,7,0.0035211268), HistogramBucket(7,8,0.0035211268), HistogramBucket(8,9,0.0035211268), HistogramBucket(9,10,0.0035211268), HistogramBucket(10,11,0.0035211268), HistogramBucket(11,12,0.0035211268), HistogramBucket(12,13,0.0035211268), HistogramBucket(13,14,0.0774647887), HistogramBucket(14,15,0.0704225352), HistogramBucket(15,16,0.0774647887), HistogramBucket(16,17,0.0669014085), HistogramBucket(17,18,0.0316901408), HistogramBucket(18,19,0.0457746479), HistogramBucket(19,20,0.0528169014), HistogramBucket(20,21,0.0669014085), HistogramBucket(21,22,0.0492957746), HistogramBucket(22,23,0.0281690141), HistogramBucket(23,24,0.0352112676), HistogramBucket(24,25,0.0316901408), HistogramBucket(25,26,0.0352112676), HistogramBucket(26,27,0.0246478873), HistogramBucket(27,28,0.0176056338), HistogramBucket(28,29,0.0422535211), HistogramBucket(29,30,0.0176056338), HistogramBucket(30,31,0.0105633803), HistogramBucket(31,32,0.014084507), HistogramBucket(32,33,0.0105633803), HistogramBucket(33,35,0.0088028169), HistogramBucket(35,38,0.0058685446), HistogramBucket(38,39,0.014084507), HistogramBucket(39,40,0.0070422535), HistogramBucket(40,41,0.014084507), HistogramBucket(41,42,0.0035211268), HistogramBucket(42,43,0.0105633803), HistogramBucket(43,44,0.0070422535), HistogramBucket(44,45,0.0035211268), HistogramBucket(45,48,0.0070422535), HistogramBucket(48,49,0.0105633803), HistogramBucket(49,54,0.0049295775), HistogramBucket(54,55,0.0070422535), HistogramBucket(55,57,0.0052816901), HistogramBucket(57,71,0.0037726358), HistogramBucket(71,72,0.0070422535)))
  val HistogramNode_05 : Histogram = Histogram("HistogramNode_5",InputVar("part",3),List(HistogramBucket(0,1,0.4862745098), HistogramBucket(1,2,0.2431372549), HistogramBucket(2,3,0.0941176471), HistogramBucket(3,4,0.0549019608), HistogramBucket(4,5,0.0196078431), HistogramBucket(5,6,0.0196078431), HistogramBucket(6,7,0.0196078431), HistogramBucket(7,8,0.0117647059), HistogramBucket(8,9,0.0078431373), HistogramBucket(9,10,0.0039215686), HistogramBucket(10,11,0.0039215686), HistogramBucket(11,12,0.0039215686), HistogramBucket(12,16,0.0039215686), HistogramBucket(16,20,0.0039215686), HistogramBucket(20,24,0.0039215686), HistogramBucket(24,41,0.0039215686), HistogramBucket(41,46,0.0039215686), HistogramBucket(46,56,0.0039215686), HistogramBucket(56,71,0.0039215686), HistogramBucket(71,72,0.0039215686)))
  val HistogramNode_06 : Histogram = Histogram("HistogramNode_6",InputVar("clause",4),List(HistogramBucket(0,1,0.9669421488), HistogramBucket(1,2,0.0082644628), HistogramBucket(2,3,0.0041322314), HistogramBucket(3,6,0.0055096419), HistogramBucket(6,46,0.0041322314), HistogramBucket(46,71,0.0041322314), HistogramBucket(71,72,0.0041322314)))

  val HistogramNode_08 : Histogram = Histogram("HistogramNode_8",InputVar("pca",0),List(HistogramBucket(0,1,0.9334006054), HistogramBucket(1,2,0.0121089808), HistogramBucket(2,3,0.0050454087), HistogramBucket(3,4,0.0040363269), HistogramBucket(4,5,0.0020181635), HistogramBucket(5,6,0.0050454087), HistogramBucket(6,8,0.0015136226), HistogramBucket(8,9,0.0030272452), HistogramBucket(9,10,0.0030272452), HistogramBucket(10,11,0.0040363269), HistogramBucket(11,14,0.0010090817), HistogramBucket(14,15,0.0020181635), HistogramBucket(15,16,0.0020181635), HistogramBucket(16,17,0.0020181635), HistogramBucket(17,18,0.0020181635), HistogramBucket(18,19,0.0020181635), HistogramBucket(19,20,0.0020181635), HistogramBucket(20,24,0.0012613522), HistogramBucket(24,26,0.0010090817), HistogramBucket(26,27,0.0020181635), HistogramBucket(27,31,0.0010090817), HistogramBucket(31,32,0.0020181635), HistogramBucket(32,38,0.0010090817), HistogramBucket(38,48,0.0011099899), HistogramBucket(48,71,0.0010090817), HistogramBucket(71,72,0.0010090817)))
  val HistogramNode_09 : Histogram = Histogram("HistogramNode_9",InputVar("building",1),List(HistogramBucket(0,1,0.8757700205), HistogramBucket(1,2,0.0811088296), HistogramBucket(2,3,0.0205338809), HistogramBucket(3,4,0.0102669405), HistogramBucket(4,5,0.0041067762), HistogramBucket(5,12,0.0011733646), HistogramBucket(12,14,0.0015400411), HistogramBucket(14,71,0.0010447062), HistogramBucket(71,72,0.0020533881)))
  val HistogramNode_10 : Histogram = Histogram("HistogramNode_10",InputVar("training",2),List(HistogramBucket(0,1,0.4556213018), HistogramBucket(1,2,0.0927021696), HistogramBucket(2,3,0.0581854043), HistogramBucket(3,4,0.0552268245), HistogramBucket(4,5,0.0345167653), HistogramBucket(5,6,0.0542406312), HistogramBucket(6,7,0.0345167653), HistogramBucket(7,8,0.0384615385), HistogramBucket(8,9,0.0315581854), HistogramBucket(9,10,0.0355029586), HistogramBucket(10,11,0.0256410256), HistogramBucket(11,12,0.0295857988), HistogramBucket(12,13,0.0187376726), HistogramBucket(13,14,9.861933E-4), HistogramBucket(14,15,9.861933E-4), HistogramBucket(15,16,9.861933E-4), HistogramBucket(16,17,9.861933E-4), HistogramBucket(17,18,9.861933E-4), HistogramBucket(18,19,9.861933E-4), HistogramBucket(19,20,9.861933E-4), HistogramBucket(20,21,9.861933E-4), HistogramBucket(21,22,9.861933E-4), HistogramBucket(22,23,9.861933E-4), HistogramBucket(23,24,9.861933E-4), HistogramBucket(24,25,9.861933E-4), HistogramBucket(25,26,9.861933E-4), HistogramBucket(26,27,9.861933E-4), HistogramBucket(27,28,9.861933E-4), HistogramBucket(28,29,9.861933E-4), HistogramBucket(29,30,9.861933E-4), HistogramBucket(30,31,9.861933E-4), HistogramBucket(31,32,9.861933E-4), HistogramBucket(32,33,9.861933E-4), HistogramBucket(33,35,9.861933E-4), HistogramBucket(35,38,9.861933E-4), HistogramBucket(38,39,9.861933E-4), HistogramBucket(39,40,9.861933E-4), HistogramBucket(40,41,9.861933E-4), HistogramBucket(41,42,9.861933E-4), HistogramBucket(42,43,9.861933E-4), HistogramBucket(43,44,9.861933E-4), HistogramBucket(44,45,9.861933E-4), HistogramBucket(45,48,9.861933E-4), HistogramBucket(48,49,9.861933E-4), HistogramBucket(49,54,9.861933E-4), HistogramBucket(54,55,9.861933E-4), HistogramBucket(55,57,9.861933E-4), HistogramBucket(57,71,9.861933E-4), HistogramBucket(71,72,9.861933E-4)))
  val HistogramNode_11 : Histogram = Histogram("HistogramNode_11",InputVar("part",3),List(HistogramBucket(0,1,0.4355329949), HistogramBucket(1,2,0.2873096447), HistogramBucket(2,3,0.1248730964), HistogramBucket(3,4,0.0649746193), HistogramBucket(4,5,0.0324873096), HistogramBucket(5,6,0.0131979695), HistogramBucket(6,7,0.0030456853), HistogramBucket(7,8,0.0091370558), HistogramBucket(8,9,0.0040609137), HistogramBucket(9,10,0.0040609137), HistogramBucket(10,11,0.0050761421), HistogramBucket(11,12,0.0020304569), HistogramBucket(12,16,0.0015228426), HistogramBucket(16,20,0.0012690355), HistogramBucket(20,24,0.0012690355), HistogramBucket(24,41,0.0010749477), HistogramBucket(41,46,0.0010152284), HistogramBucket(46,56,0.0010152284), HistogramBucket(56,71,0.0010829103), HistogramBucket(71,72,0.0010152284)))
  val HistogramNode_12 : Histogram = Histogram("HistogramNode_12",InputVar("clause",4),List(HistogramBucket(0,1,0.9886831276), HistogramBucket(1,2,0.0020576132), HistogramBucket(2,3,0.0020576132), HistogramBucket(3,6,0.0013717421), HistogramBucket(6,46,0.0010545267), HistogramBucket(46,71,0.0010288066), HistogramBucket(71,72,0.0020576132)))

  val ProductNode_01 : Product = Product("ProductNode_1", List(HistogramNode_02, HistogramNode_03, HistogramNode_04, HistogramNode_05, HistogramNode_06))
  val ProductNode_07 : Product = Product("ProductNode_7", List(HistogramNode_08, HistogramNode_09, HistogramNode_10, HistogramNode_11, HistogramNode_12))

  val WA_01 : WeightedAddend = WeightedAddend(ProductNode_01, 0.19583333333333333)
  val WA_02 : WeightedAddend = WeightedAddend(ProductNode_07, 0.8041666666666667)

  val Sum_00 : WeightedSum = WeightedSum("SumNode_0", List(WA_01, WA_02))
  val InputListNips5 : List[InputVar] = List(InputVar("pca",0), InputVar("building",1), InputVar("training",2), InputVar("part",3), InputVar("clause",4))

  val IRNips5 : IRGraph = IRGraph(Sum_00, InputListNips5)

  "A JSON Parser" should "be able to convert a JSON String into an IRGraph" in {
    // Make a copy of the initial String
    val jsonString : String = jsonStringNips5.trim
    assert(ParserJSON.parseJSON(jsonString) === IRNips5)
  }

  it must "throw an exception when non-leaf nodes provide no 'children' field" in {
    // Create a malformed JSON String by renaming a 'children' field
    // Since only non-leaf nodes *should* and *must* have such a field, this will lead to an exception
    val jsonString : String = jsonStringNips5.replace("children", "child")
    assertThrows[java.util.NoSuchElementException] {ParserJSON.parseJSON(jsonString)}
  }

}
